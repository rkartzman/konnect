// Mobile First
@mixin break($media) {
    @if (type-of($media) == "number") {
        @if (unit($media) == "px") {
            @media screen and (min-width: #{$media}) {
                @content;
            }
        }
        @else {
            @media screen and (min-width: #{$media}em) {
                @content;
            }
        }
    }
    @elseif ($media == retina) {
        @media screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            @content;
        }
    }
    @elseif ($media == ipad-only) {
        @media only screen and (min-device-width: 768px) and (min-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 1) {
            @content;
        }
    }
    @else {
        @media screen and (#{$media}) {
            @content;
        }
    }
}

// Desktop First
@mixin break-max($media) {
    @if (type-of($media) == "number") {
        @if (unit($media) == "px") {
            @media screen and (max-width: #{$media}) {
                @content;
            }
        }
        @else {
            @media screen and (max-width: #{$media}em) {
                @content;
            }
        }
    }
    @elseif ($media == retina) {
        @media screen and (-webkit-max-device-pixel-ratio: 2), (max-resolution: 192dpi) {
            @content;
        }
    }
    @elseif ($media == ipad-only) {
        @media only screen and (max-device-width: 768px) and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 1) {
            @content;
        }
    }
    @else {
        @media screen and (#{$media}) {
            @content;
        }
    }
}

@mixin opacity($opacity: 100) {
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity})";
    filter: alpha(opacity=$opacity);
    -moz-opacity: $opacity / 100;
    -khtml-opacity: $opacity / 100;
    opacity: $opacity / 100;
}

@mixin box() {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin b-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -o-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    -ms-transition: $args;
    transition: $args;
}

@mixin transition-delay($args) {
    -webkit-transition-delay: $args;
    -moz-transition-delay: $args;
    -o-transition-delay: $args;
    transition-delay: $args;
}

@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -o-transform-origin: $args;
    -ms-transform-origin: $args;
    transform-origin: $args;
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -o-transform: $args;
    -ms-transform: $args;
    transform: $args;
}

@mixin gradient($top, $bottom) {
    background: -webkit-gradient(linear, left top, right top, from($top), to($bottom));
    background: -webkit-linear-gradient(top, $top, $bottom);
    background: -moz-linear-gradient(top, $top, $bottom);
    background: -o-linear-gradient(top, $top, $bottom);
    background: -ms-linear-gradient(top, $top, $bottom);
    background: linear-gradient(top, $top, $bottom);
}

@mixin b-shadow($value, $color) {
    -webkit-box-shadow: $value $color;
    -moz-box-shadow: $value $color;
    -o-box-shadow: $value $color;
    -ms-box-shadow: $value $color;
    box-shadow: $value $color;
}

@mixin user-select-none() {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    -o-user-select: none;
    user-select: none;
}

@mixin font-smoothing {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

//Flexbox
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex:  $values;
    -webkit-flex:  $values;
    -ms-flex:  $values;
    flex:  $values;
}

// Covert px to em
// @function em($px, $base: $base-font-size) {
//     @return ($px / $base) * 1em;
// }

// Vertical Center
@mixin v-center($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin v-center-clear() {
    position: relative;
    top: auto;
    -webkit-transform: none;
    -moz-transform: none;
    -o-transform: none;
    -ms-transform: none;
    transform: none;
}